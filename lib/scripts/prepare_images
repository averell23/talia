#!/usr/bin/env ruby

$: << File.join(File.dirname(__FILE__), '..', '..', 'vendor', 'plugins', 'talia_core', 'lib')
require 'fileutils'
require 'progressbar'

begin
  require 'optiflag'
rescue LoadError
  require 'rubygems'
  gem 'optiflag'
  require 'optiflag'
end

module CommandLineFlags extend OptiFlagSet

  flag 'input' do
    alternate_forms 'i'
    description 'Input Directory'
  end

  optional_flag 'output' do
    alternate_forms 'o'
    description 'Output Directory - default: "iip_staging" inside the input dir'
  end

  optional_switch_flag 'force' do
    description 'Force overwriting of existing files'
  end

  and_process!
end


# Prepares the image files for the IIP server
VIPS_COMMAND='/opt/local/bin/vips'
CONVERT_COMMAND='/opt/local/bin/convert'
THUMB_SIZE = '128x128'

# Create the thumbnail by running the configured creation command.
def create_thumb(source, destination, force = false)
  return if(File.exists?(destination) && !force)
  # execute vips command for create thumbnail
  # TODO: to add options, such as size, we can modify this row
  thumbnail_command = "#{CONVERT_COMMAND} #{source} -resize #{THUMB_SIZE} #{destination}"
  system_result = system(thumbnail_command)

  # check if thumbnails file is created
  puts "Error for #{source}: Command #{CONVERT_COMMAND} failed (#{$?})." unless (File.exists?(destination) || !system_result)
end
      
# Creates the pyramid image for IIP by running the configured system
# command. This automatically creates the file in the correct location 
# (IIP root)
def create_pyramid(source, destination, force = false)
  return if(File.exists?(destination) && !force)
  # execute vips command for create pyramid image
  # TODO: to add options, such as size, we can modify this row
  pyramid_command = "#{VIPS_COMMAND} im_vips2tiff #{source} #{destination}:deflate,tile,pyramid"
  system_result = system(pyramid_command)

  # check if thumbnails file is created
  puts "Error for #{source}: Command #{VIPS_COMMAND} failed (#{$?})." unless (File.exists?(destination) || !system_result)
end

flags = CommandLineFlags.flags

source_dir = flags.input
destination = flags.output ? File.expand_path(flags.output) : File.join(source_dir, 'iip_staging')

files = Dir["#{source_dir}/*.{jpg,JPG,gif,GIF,png,PNG,tif,TIF,jpeg,JPEG}"]

puts "Will process #{files.size} files."

progress = ProgressBar.new('Processing', files.size)
# create data directory path
FileUtils.mkdir_p(destination) 
FileUtils.mkdir_p(File.join(destination, 'pyramids'))
FileUtils.mkdir_p(File.join(destination, 'thumbs'))


files.each do |file|
  create_thumb(file, File.join(destination, 'thumbs', File.basename(file)), flags.force)
  create_pyramid(file, File.join(destination, 'pyramids', "#{File.basename(file, File.extname(file))}.tif"), flags.force)
  progress.inc
end

progress.finish
puts "Finished"

