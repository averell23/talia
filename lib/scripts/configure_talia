#!/usr/bin/env ruby

require 'rubygems'
gem 'activerecord'
require 'active_record'
require 'fileutils'

rails_dir = File.join(File.dirname(__FILE__), '..', '..')
talia_dir = File.join(rails_dir, 'vendor', 'plugins', 'talia_core')
Dependencies.load_paths << File.join(talia_dir, 'lib')

config_dir = File.join(rails_dir, 'config')



def readl
  gets[0..-2]
end

def read_yn(question)
  question = question + " (yn) "
  print question
  while(!(result = readl) || result == '') 
    print question
  end
  (result[0..0].downcase == 'y')
end

puts
puts "Talia Configuration Tool for Discovery"
puts
puts "This script will assist you in setting up your Talia instance for deployment"
puts

puts "Enter the location of the mysql sock file."
puts "For the self-installed mySQL version on MacOS enter /tmp/mysql.sock"
puts "Keep the default if you use the builtin mySQL of MacOS X Server."
print "MySQL sock file (/var/mysql/mysql.sock): "
sock_file = readl
sock_file = '/var/mysql/mysql.sock' if(sock_file.strip == '')
puts

mysql_setup = TaliaUtil::Configuration::MysqlDatabaseSetup.new
mysql_setup.host = 'localhost'
mysql_setup.app_name = 'discovery_talia'
mysql_setup.sock = sock_file

print "Enter the mySQL root pasword: "
root_pw = readl
mysql_setup.root_credentials('root', root_pw)
if(root_pw == '')
  puts 
  puts "Your root password is empty. This is not good."
  if(read_yn("Do you want to set a new one?"))
    print "Enter new root password: "
    new_root_pw = readl
    if(mysql_setup.assign_root_pw(new_root_pw)) 
      puts "... password successfully changed."
    else
      puts "... seems there was a problem changing the password."
      exit 1
    end
  end
end

puts
puts "Enter the mySQL username for your application. This account will be created automatically."
print "mySQL account for the application: "
rails_user = readl
print "Enter the password for this account: "
rails_pw = readl

mysql_setup.rails_credentials(rails_user, rails_pw)

puts
if(read_yn("Do you want to create the databases now?"))
  puts
  print "Creating databases..."
  mysql_setup.create_default_databases
  mysql_setup.execute
  puts " done."
end

print "Loading the configuration templates..."
db_config = TaliaUtil::Configuration::DatabaseConfig.new(File.join(config_dir, 'database.yml.discovery_template'))
rdf_config = TaliaUtil::Configuration::ConfigFile.new(File.join(config_dir, 'rdfstore.yml.app_example'))
talia_config = TaliaUtil::Configuration::ConfigFile.new(File.join(config_dir, 'talia_core.yml.app_example'))
talia_test_config = TaliaUtil::Configuration::ConfigFile.new(File.join(talia_dir, 'test', 'config', 'talia_core.yml_example'))
puts " done."

db_config.set_adapter('jdbcmysql')
db_config.set_credentials(rails_user, rails_pw)
db_config.set_database_names('discovery_talia')
# Don't set socket for jdbcmysql
# db_config.set_socket(sock_file)

puts
print "Enter the URI for your site: "
site_url = readl

puts
print "Enter the URL of your IIP server, or the port number (for default URL on localhost): "
iip_url = readl

# If only numerals, we'll create the URL
if(iip_url =~ /^\d*$/)
  iip_url = "http://localhost:#{iip_url}/fcgi-bin/iipsrv.fcgi"
end
puts "Setting IIP URL to: #{iip_url}"

talia_config.iip_server_uri = iip_url

puts
print "Enter the path to store the IIP image files (return for default): "
iip_directory = readl

if(iip_directory.strip != '')
  talia_config.iip_root_directory_location = iip_directory
end

print "Enter the path to store all other data files (return for default): "
data_directory = readl

if(data_directory.strip != '')
  talia_config.data_directory_location = data_directory
end

talia_config.local_uri = site_url

# These are the locations containing config files
locations = [config_dir, File.join(talia_dir, 'config'), File.join(talia_dir, 'test', 'config')]

if(read_yn("Do you want to write the configuration now? (Overwrites the existing config!)"))
  print "Writing config files..."
  # Writing database and rdf config to all locations
  locations.each do |dir| 
    db_config.write(File.join(dir, 'database.yml')) 
    rdf_config.write(File.join(dir, 'rdfstore.yml'))
  end
  # Write the talia configurations
  talia_config.write(File.join(config_dir, 'talia_core.yml'))
  talia_config.write(File.join(talia_dir, 'config', 'talia_core.yml'))
  talia_test_config.rdf_connection = nil
  talia_test_config.rdf_connection_file = 'rdfstore'
  talia_test_config.write(File.join(talia_dir, 'test', 'config', 'talia_core.yml'))
  puts " done."
else
  puts "Writing config samples to config dir."
  talia_config.write(File.join(config_dir, 'talia_core_auto.yml'))
  rdf_config.write(File.join(config_dir, 'rdfstore_auto.yml'))
  db_config.write(File.join(config_dir, 'database_auto.yml'))
end

puts 
puts "Now migrating the databases"
%w(test development production).each do |env|
  raise("Error migrating #{env}") unless(system("rake db:migrate RAILS_ENV=#{env}"))
  raise("Error creating globalize tables in #{env}") unless(system("rake globalize:setup RAILS_ENV=#{env}"))
  puts "Migrated #{env}"
end

print "Importing language files..."
Dir[File.join(rails_dir, 'languages', '*_glob.csv')].each do |lang_file|
  language = File.basename(lang_file)[0..1] # first two chars are the lang code
  print " language"
  raise("Error importing language #{language}") unless(system("rake discovery:import_language language=#{language} file=#{File.expand_path(lang_file)}"))
end
puts " ... done."
puts

puts "Customize the start page. The following custom start pages are available:"
cust_pages = Dir[File.join(rails_dir, 'app', 'views', 'custom', '_start_page_*.html.erb')]
cust_pages.each do |cust_page|
  # Get the descriptive name
  md = /_start_page_(.*)\.html\.erb/.match(cust_page)
  puts "#{cust_pages.index(cust_page)} - #{md[1]}"
end

cust_page_file = nil

while(!cust_page_file)
  print "Enter the number of the customization: "
  cust_idx = readl
  cust_page_file = cust_pages[cust_idx.to_i]
end

FileUtils.copy(File.expand_path(cust_page_file), File.join(rails_dir, 'app', 'views', 'custom', '_start_page.html.erb'))
puts "Copied #{File.basename(cust_page_file)} to custom page."

puts

puts "Customize the header image for the start page." 
puts "The following image combinations were found: "
cust_images = Dir[File.join(rails_dir, 'public', 'images', 'start_page')]
cust_images = cust_images.find_all { |cust_im| File.stat?(cust_im).directory? }
cust_images.each do |image_dir|
  puts "#{cust_images.index(image_dir)} - #{File.basename(image_dir)}"
end

cust_image_dir = nil

while(!cust_image_dir)
  print "Enter the number of the customization: "
  cust_idx = readl
  cust_image_dir = cust_images[cust_idx.to_i]
end

files = Dir[File.join(cust_image_dir, "*.jpg")]

FileUtils.copy(files, File.join(rails_dir, 'public_images', 'start_page'), :verbose => true)

puts "Files copied."
puts

puts
puts "Building the war file"
system("warble")

puts
puts "Configuration complete"
puts